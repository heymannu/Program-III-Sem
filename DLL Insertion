#include<stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node *link;
    struct node *prev;
};
   
    void create( struct node **head, struct node **temp, struct node **newnode)
    {   
      
       for(int i=0;i<5;i++)
        {
        (*newnode) = (struct node*)malloc(sizeof(struct node));
        printf("Enter data :");
        scanf("%d",&(*newnode)->data);
        (*newnode)->link=0;
        (*newnode)->prev=0;
        
            if((*head)==0)
            {
                (*head)=(*temp)=(*newnode);
            }
            else
            {
                (*temp)->link=(*newnode);
                (*newnode)->prev=(*temp);
                (*temp)=(*newnode);
            }

    }  
    }
     void insert_at_beginning(struct node **head,struct node **tail)
    {   
        
      struct node *newnode = (struct node*)malloc(sizeof(struct node));
        printf("Enter the element you want to insert at the beginning:");
        scanf("%d",&newnode->data);
        newnode->link=0;
        newnode->prev=0;
        if((*head)==0)
        {
            (*head)=(*tail)=newnode;
        }
        else
        {
            newnode->link=(*head);
            (*head)->prev=newnode;
            newnode->prev=0;
            (*head)=newnode;
        }
        
      
    }
    void display(struct node *head)
    {
        struct node *temp;
       temp=head;
        printf("Doubly linked list is:");
        while(temp!=0)
        {
            printf("%d",temp->data);
            temp=temp->link;
        }
    }
    void insert_at_end(struct node **head,struct node **tail)
    {
        struct node *newnode = (struct node*)malloc(sizeof(struct node));
        printf("Enter the element you want to insert at the beginning:");
        scanf("%d",&newnode->data);
        newnode->link=0;
        newnode->prev=0;
        if((*head)==0)
        {
            (*head)=(*tail)=newnode;
        }
        else
        {
            while((*tail)->link!=0)
            {
                (*tail)=(*tail)->link;
            }
            (*tail)->link=newnode;
            newnode->prev=(*tail);
            (*tail)=newnode;

        }
    }
   
  

int main()
    {  
        struct node *head=0;
        struct node *temp=0;
        struct node *tail=0;
        struct node *newnode=0;
         create(&head,&temp,&newnode);
        insert_at_beginning(&head,&tail);
        insert_at_end(&head,&tail);
        display(head);
    }
